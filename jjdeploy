#!/usr/bin/env bash

VERSION="0.2.5"

### Constants

CONFIG_FILE="jjdeploy.config"
greenColor='\x1B[0;32m'
redColor='\x1B[0;31m'
endColor='\x1B[0m'
RESOURCESPATH="jjdeploy_resources"
SCRIPTPATH="$(cd "$(dirname "$0")" && pwd)"
SCRIPTPATH="${SCRIPTPATH}""/$(readlink "$0")"
SCRIPTPATH="$(dirname ${SCRIPTPATH})"
SCRIPTPATH="${SCRIPTPATH}/../"

### Functions

function usage
{
    echo "Usage: jjdeploy [init] [ [config_file=jjdeploy.config] [-v] [-h] [--version] ]\n Specify init without any other parameters to create an initial configuration file"
}

if [ $# -eq 1 ] && [ $1 = "init" ];
then
	
	if [ -f "${PWD}/${CONFIG_FILE}" ];
	then
		echo -e "${redColor}Error: config file 'jjdeploy.config' already exists.${endColor}"
	else
		cp "${SCRIPTPATH}/${CONFIG_FILE}" "${PWD}"
		
		workspaces="$(basename "$(find $PWD -iname "*.xcworkspace" -type d -print0 | head -1)")"
		workspacename=${workspaces%.xcworkspace}
				
		if [ -n "$workspacename" ];
		then
		sed -i '' "s/##project_name##/${workspacename}/g" "${CONFIG_FILE}"
		
		plist_file="$(find . -iname "${workspacename}-Info.plist" -type f -print0 | head -1)"
		
		if [ -z "$plist_file" ];
		then
			plist_file="$(find . -iname "${workspacename}*-Info.plist" -type f -print0 | head -1)"
		fi
		
		plist_file="$(sed -e 's/[\/&]/\\&/g' <<< "$plist_file" )"
		fi
		
		if [ -z "$plist_file" ];
		then
		plist_file='$APPNAME\/$APPNAME-Info.plist'
		fi

		sed -i '' "s/##plist_path##/${plist_file}/g" "${CONFIG_FILE}"
		
		echo -e "${greenColor} '${CONFIG_FILE}' created. Check it and fill any missing info to start using jjdeploy here. ${endColor}"
	fi
	
	exit 0
fi

verbose=0
send_email=0
config_file=""

while [ "$1" != "" ]; do
	case $1 in
		-v | --verbose )	verbose=1
							shift
							;;
		-email )			send_email=1
							shift
							;;
		--version )			echo $VERSION
							exit
							;;
		-h | --help )		usage
					  		exit
					  	  	;;
		* )            		config_file=$1
							shift
							exit 1
	esac
	shift
done

if [ -z ${config_file} ];
then
config_file="${PWD}/jjdeploy.config"
fi

if [ ! -f ${config_file} ];
then	
	echo -e "${redColor} Error: No config file found. Check your current path or use jjdeploy init to create an initial template.\n${endColor}"
	exit 1
fi

home_config_file="${HOME}/.jjdeploy/jjdeploy.config"
if [ -f ${home_config_file} ];
then
	source "${home_config_file}"	
fi

source "${config_file}"

### Script Constants

#### Check resources path first (Use local, and if it doesn't exist use global)

FINAL_RESOURCESPATH="${PWD}/${RESOURCESPATH}"
if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then
	FINAL_RESOURCESPATH="${HOME}/.jjdeploy/${RESOURCESPATH}"
	if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then	
		FINAL_RESOURCESPATH="${SCRIPTPATH}/${RESOURCESPATH}"
	fi
fi

if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then
	echo -e "${redColor} Error: Archive Resources not found. Please check your installation of JJDeploy.\n${endColor}"
	exit 1
fi

export PUBLISH_PLIST_URL="${PUBLISH_URL}/${APPNAME}.plist"
export PUBLISH_IPA_URL="${PUBLISH_URL}/${APPNAME}.ipa"

XCARCHIVEPATH="${ARCHIVEPATH}/${APPNAME}.xcarchive"
IPAARCHIVEPATH="${ARCHIVEPATH}/${APPNAME}.ipa"
PLISTPATH="${FINAL_RESOURCESPATH}/app.plist"
PLISTARCHIVEPATH="${ARCHIVEPATH}/${APPNAME}.plist"

TEMPLATE_HTML_FILENAME="${FINAL_RESOURCESPATH}/index_template.html"
HTML_FILENAME="index.html"
HTMLARCHIVEPATH="$ARCHIVEPATH/$HTML_FILENAME"
CSSPATH="${FINAL_RESOURCESPATH}/css"
CSSARCHIVEPATH="$ARCHIVEPATH/css"
ICONARCHIVEPATH="$ARCHIVEPATH/Icon.png"

### Commands

#### Request changes

CHANGES="Fixes"

if [ -d "$ROOT_DIR/.git" ]
then
	CHANGES="$(echo -n `git log -1 --pretty=%B`)"
elif [ -d "$ROOT_DIR/.hg" ]
then
	CHANGES="$(hg log -l 1 --template "{desc}")"
fi

CHANGES=`osascript -e "set changes to the text returned of (display dialog \"What has changed?\" default answer \"${CHANGES}\")
return changes"`

if [ -z "$CHANGES" ];
then
	echo "User Cancelled"
	exit 0
fi

export CHANGES

#### Check required resources are copied into the project folder

#### Archive
echo "Archiving…"

if [ ! -d "$ARCHIVEPATH" ]; then
	mkdir -p "$ARCHIVEPATH"
fi

build="xcodebuild -workspace \"$WORKSPACE\" -scheme \"$SCHEME\" -destination generic/platform=iOS archive -archivePath \"$XCARCHIVEPATH\""

[ $verbose -ne 1 ] && build=$build" | egrep -A 5 \"(error|warning):\""

eval $build

if [ ! -d $XCARCHIVEPATH ];
then
	echo -e "${redColor} Error archiving project. Please check xcodebuild output and fix any issues you find.\n${endColor}"
	exit 1
fi

rm "$IPAARCHIVEPATH" > /dev/null 2> /dev/null

#### Export
echo "Exporting ipa file…"

archive="xcodebuild -exportArchive -exportFormat ipa -archivePath \"$XCARCHIVEPATH\" -exportPath \"$IPAARCHIVEPATH\" -exportProvisioningProfile \"$PROVPROFILE\""

[ $verbose -ne 1 ] && archive=$archive" > /dev/null"

eval $archive

rm -rf "$XCARCHIVEPATH"

export CURRENT_TIMESTAMP=`date +"%d.%m.%Y %H:%M"`

export APP_VERSION=`/usr/libexec/PlistBuddy -c Print:CFBundleShortVersionString "$PLISTFILE"`

export BUNDLE_ID=`/usr/libexec/PlistBuddy -c Print:CFBundleIdentifier "$PLISTFILE"`

export DISPLAY_APPNAME

export COMPANYNAME

#### Fill template & generate html file
echo "Filling templates…"

perl -p -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg' < "${TEMPLATE_HTML_FILENAME}" > "${HTMLARCHIVEPATH}"

### Fill plist file
perl -p -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg' < "${PLISTPATH}" > "${PLISTARCHIVEPATH}"

if [ -f $HTMLARCHIVEPATH ];
then
	#### Copy css files
	cp -R "$CSSPATH" "$ARCHIVEPATH"
	
	#### Find Icon & copy to archive
	echo "Finding Icon…"
	
	iconpath=`find $ROOT_DIR -type d -name '*.appiconset' -print | head -n 1`
	if [ -n "$iconpath" ];
	then
		icon=`find ${iconpath} -type f -print0 | xargs -0 ls -1S | head -n 1`
		if [ -n "$icon" ];
		then
			cp "$icon" "$ICONARCHIVEPATH"
		else
			echo -e "${redColor} Error: Icon file not found. Please check that your image asset contains the app icon.\n${endColor}"
		fi
	else
		echo -e "${redColor} Error: Icon file not found. Image assets are required to display the app icon.\n${endColor}"
	fi
fi

if [ -f $IPAARCHIVEPATH ] && [ -f $HTMLARCHIVEPATH ];
then
	
	#### Commit & push changes
	echo "Commit & push changes…"
	
	if [ -d "$ROOT_DIR/.git" ]
	then
		if [ $verbose -ne 1 ]; then
			git add -A $ROOT_DIR
			git commit -m "$CHANGES" -q
			git push  > /dev/null -q
		else
			git add -A $ROOT_DIR
			git commit -m "$CHANGES"
			git push
		fi
	elif [ -d "$ROOT_DIR/.hg" ]
	then
		if [ $verbose -ne 1 ]; then
			hg addrem $ROOT_DIR  > /dev/null
			hg commit -m "$CHANGES"  > /dev/null
			hg push  > /dev/null
		else
			hg addrem $ROOT_DIR
			hg commit -m "$CHANGES"
			hg push
		fi
	fi
	
	#### Upload with Transmit
	echo "Uploading…"
	
	upload_result=`osascript  -e "
	on is_running(appName)
		tell application \"System Events\" to (name of processes) contains appName
	end is_running
	
	set wasRunning to is_running(\"Transmit\")

	with timeout of 600 seconds
	tell application \"Transmit\"
	set SuppressAppleScriptAlerts to true
	set server to item 1 of (favorites whose name is \"${TRANSMIT_FAVNAME}\")
		set doc to (make new document at end)
		tell current tab of doc
			connect to server
			tell remote browser
			
				set result to (upload item at path \"${HTMLARCHIVEPATH}\" to \"${FTPREMOTEPATH}\" with resume mode overwrite)
				if not result then
					return false
				end if
				
				set result to (upload item at path \"${PLISTARCHIVEPATH}\" to \"${FTPREMOTEPATH}\" with resume mode overwrite)
				if not result then
					return false
				end if
				
				set result to (upload item at path \"${IPAARCHIVEPATH}\" to \"${FTPREMOTEPATH}\" with resume mode overwrite)
				if not result then
					return false
				end if
				
				set result to (upload item at path \"${CSSARCHIVEPATH}\" to \"${FTPREMOTEPATH}\" with resume mode overwrite)
				if not result then
					return false
				end if
				
				set result to (upload item at path \"${ICONARCHIVEPATH}\" to \"${FTPREMOTEPATH}\" with resume mode overwrite)
				if not result then
					return false
				end if
				
			end tell
			close remote browser
		end tell
		close doc
	if not wasRunning then
		quit
	end if
	return true
	end tell
	end timeout"`
	
	if [ "$upload_result" = "false" ];
	then
		echo -e "${redColor} Error uplading file. Please check your FTPREMOTEPATH configuration and try again.\n${endColor}"
		exit 1
	fi
	
	#### Send email

	if [ $send_email -eq 1 ];
	then
	echo "Sending email…"
	osascript -e "
	tell application \"Mail\"
		set theMessage to make new outgoing message with properties {subject:\"${APPNAME} ${APP_VERSION} Published\", content:${CHANGES}, visible:true}
		tell theMessage
			make new to recipient with properties {name:\"${COMPANYNAME}\", address:\"${COMPANYEMAIL}\"}
			send
		end tell
	end tell"
	fi
	
	echo -e "${greenColor}\nDone\n${endColor}"
else
	
	#### Report Error
	
	echo -e "${redColor} Error: no ipa or html file. Run with -v option and check the xcodebuild output. \n${endColor}"
	
	osascript  -e "display alert \"Error archiving ${APPNAME}. No ipa or html file\""
	open $ARCHIVEPATH
fi

tput bel

