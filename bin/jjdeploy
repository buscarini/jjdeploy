#!/usr/bin/env bash

VERSION="0.9.5"

OLD_WORKSPACE=$WORKSPACE
unset WORKSPACE

### Constants

CONFIG_FILE="jjdeploy.config"
greenColor='\x1B[0;32m'
redColor='\x1B[0;31m'
endColor='\x1B[0m'
RESOURCESPATH="jjdeploy_resources"
HTML_FILENAME="index.html"

pushd . > /dev/null
THEPATH="${BASH_SOURCE[0]}";
while([ -h "${THEPATH}" ]); do
    cd "`dirname "${THEPATH}"`"
    THEPATH="$(readlink "`basename "${THEPATH}"`")";
done
cd "`dirname "${THEPATH}"`" > /dev/null
THEPATH="`pwd`";
popd  > /dev/null

SCRIPTPATH="${THEPATH}/../"

SEND_EMAIL=false
DISABLE_SOURCE_CONTROL=0
EXPORTMETHOD="enterprise"
XCODEPARAMS=""
APPICON=""
EMAIL=""
EMAIL_NAME=""
CI_SERVER=0
FTP_USE_SFTP=true
PROVPROFILE=""
BUNDLE_ID=""


messageTempFile="${PWD}/.jjdeploy_tmp_message"

### Functions

function usage ()
{
    echo "Usage: jjdeploy init || init resources || update || upload [config_file] || [ [config_file] [-v] [-h] [--version] [-m \"message\"] ]\n Specify init without any other parameters to create an initial configuration file"
}

function sendEmail ()
{
	subject=$1
	body=$2
	email_name=$3
	email=$4
	
	echo "Sending email…"
	osascript -e "
	tell application \"Mail\"
		set theMessage to make new outgoing message with properties {subject:\"${APPNAME} ${APP_VERSION} (${BUILD_NUMBER}) Published\", content:\"${EMAIL_BODY}\", visible:true}
		tell theMessage
			make new to recipient with properties {name:\"${EMAIL_NAME}\", address:\"${EMAIL}\"}
			send
		end tell
	end tell"
}

function upload ()
{
	local FTPREMOTEPATH=$1
	
	local KEYCHAINITEM=$2
	local ACCOUNT=$3
	local SERVER=$4
	local PORT=$5
	
	local HTMLARCHIVEPATH=$6
	local PLISTARCHIVEPATH=$7
	local IPAARCHIVEPATH=$8
	local CSSARCHIVEPATH=$9
	local ICONARCHIVEPATH=${10}
	local FTP_USE_SFTP=${11}
	
	#### Upload
	echo "Uploading to ${FTPREMOTEPATH} …"	
	
	local remoteFolder=$(basename "${FTPREMOTEPATH}")
	
	echo "${SCRIPTPATH}/bin/upload.py \"$KEYCHAINITEM\" \"$ACCOUNT\" \"$SERVER\" \"$PORT\" \"$FTPREMOTEPATH\" \"$FTP_USE_SFTP\" \"$HTMLARCHIVEPATH\" \"$PLISTARCHIVEPATH\" \"$IPAARCHIVEPATH\" \"$CSSARCHIVEPATH\" \"$ICONARCHIVEPATH\""
	
	local upload_result=$("${SCRIPTPATH}bin/upload.py" "$KEYCHAINITEM" "$ACCOUNT" "$SERVER" "$PORT" "$FTPREMOTEPATH" "$FTP_USE_SFTP" "$HTMLARCHIVEPATH" "$PLISTARCHIVEPATH" "$IPAARCHIVEPATH" "$CSSARCHIVEPATH" "$ICONARCHIVEPATH")
	local return_code=$?
	
	if [[ $return_code != 0 ]];
	then
		echo $upload_result
		echo -e "${redColor} Error uploading file. Please check your FTPREMOTEPATH configuration and try again.\n${endColor}"
		exit 1
	fi
}

function generateExportPlist ()
{
	local METHOD=$1
	local PLISTPATH=$2
	local BUNDLEID=$3
	local PROFILE=$4

	cat > "$PLISTPATH" <<-EOF
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
	<plist version="1.0">
	<dict>
        <key>method</key>
        <string>${METHOD}</string>
		<key>provisioningProfiles</key>
		<dict>
			<key>${BUNDLEID}</key>
			<string>${PROFILE}</string>
		</dict>
	</dict>
	</plist>
	EOF
}

function resourceFilePath ()
{
	local RESOURCESPATH=$1
	local RESOURCE=$2
		
	FINAL_RESOURCEPATH="${PWD}/${RESOURCESPATH}/${RESOURCE}"
	if [ ! -f  "${FINAL_RESOURCEPATH}" ]; then
		FINAL_RESOURCEPATH="${PWD}/.jjdeploy/${RESOURCESPATH}/${RESOURCE}"
		if [ ! -f "${FINAL_RESOURCEPATH}" ]; then	
			FINAL_RESOURCEPATH="${HOME}/.jjdeploy/${RESOURCESPATH}/${RESOURCE}"
			if [ ! -f  "${FINAL_RESOURCEPATH}" ]; then	
				FINAL_RESOURCEPATH="${SCRIPTPATH}${RESOURCESPATH}/${RESOURCE}"
			fi
		fi
	fi
	
	echo "${FINAL_RESOURCEPATH}"
}

function render ()
{
	TEMPLATE_HTML_FILENAME=$1
	HTMLARCHIVEPATH=$2
	
	`echo "export" $((set -o posix ; set)|awk -F "=" 'BEGIN{ORS=" "}1 $1~/[a-zA-Z]/ {print $1}')`
	
	perl -p -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg' < "${TEMPLATE_HTML_FILENAME}" > "${HTMLARCHIVEPATH}"
}

if [ $# -eq 1 ] && [ $1 = "update" ];
then
	echo "Updating to the latest version…"
	brew update
	brew upgrade jjdeploy
	exit 0
fi

if [ $# -eq 1 ] && [ $1 = "init" ];
then
	
	if [ -f "${PWD}/${CONFIG_FILE}" ];
	then
		echo -e "${redColor}Error: config file '${CONFIG_FILE}' already exists.${endColor}"
		exit 1
	else
		cp "${SCRIPTPATH}${CONFIG_FILE}" "${PWD}"
		
		workspaces="$(basename "$(find "$PWD" -iname "*.xcworkspace" -type d -not -path '*/\.*' -print0 | head -1)")"
		workspacename=${workspaces%.xcworkspace}
				
		if [ -z "$workspacename" ];
		then
			project="$(basename "$(find "$PWD" -iname "*.xcodeproj" -type d -not -path '*/\.*' -print0 | head -1)")"
			projectname=project%.xcodeproj}
			workspacename=projectname
		
			sed -i '' "s/##project##/${project}/g" "${CONFIG_FILE}"	
		else
			sed -i '' "s/##project##//g" "${CONFIG_FILE}"	
		fi

		if [ -n "$workspacename" ];
		then
		sed -i '' "s/##project_name##/${workspacename}/g" "${CONFIG_FILE}"
		
		plist_file="$(find . -iname "${workspacename}-Info.plist" -type f -not -path '*/\.*' -print0 | head -1)"
		
		if [ -z "$plist_file" ];
		then
			plist_file="$(find . -iname "${workspacename}*-Info.plist" -type f -not -path '*/\.*' -print0 | head -1)"
		fi
		
		plist_file="$(sed -e 's/[\/&]/\\&/g' <<< "$plist_file" )"
		fi
		
		if [ -z "$plist_file" ];
		then
		plist_file='$APPNAME\/$APPNAME-Info.plist'
		fi

		sed -i '' "s/##plist_path##/${plist_file}/g" "${CONFIG_FILE}"
		
		echo -e "${greenColor} '${CONFIG_FILE}' created. Check it and fill any missing info to start using jjdeploy here. ${endColor}"
	fi
	
	exit 0
fi

if [ $# -eq 2 ] && [ $1 = "init" ] && [ $2 = "resources" ];
then
	if [ -f "${PWD}/${RESOURCESPATH}" ];
	then
		echo -e "${redColor}Error: resources path '${RESOURCESPATH}' already exists.${endColor}"
		exit 1
	else
		rm -rf "${PWD}/${RESOURCESPATH}"
		cp -R "${SCRIPTPATH}${RESOURCESPATH}" "${PWD}/${RESOURCESPATH}"
		echo -e "${greenColor} '${RESOURCESPATH}' created. ${endColor}"
	fi
	
	exit 0
fi

verbose=0
param_send_email=-1
config_file=""
only_upload=0
interactive=1
message=""

while [ "$1" != "" ]; do
	case $1 in
		-v | --verbose )	verbose=1
							shift
							;;
		-email )			param_send_email=1
							shift
							;;
		-noemail )			param_send_email=0
							shift
							;;
		--version )			echo $VERSION
							exit
							;;
		-h | --help )		usage
					  		exit
					  	  	;;
		-m )				shift
							message=$1
							interactive=0
							if [ ! -n "$message" ]; then
								echo -e "${redColor}Error: no message specified\n${endColor}"
								exit 1
							fi
							shift
							;;
		upload )			only_upload=1
							shift
							;;
		* )            		config_file=$1
							shift
	esac
done

if [ -z "${config_file}" ];
then
config_file="${PWD}/jjdeploy.config"
fi

if [ ! -f "${config_file}" ];
then	
	echo -e "${redColor} Error: No config file found. Check your current path or use jjdeploy init to create an initial template.\n${endColor}"
	exit 1
fi

echo "Reading config file ${config_file} …"

# We use this to set the appname variable, then we open the home config, then we open this again to replace values in the home config
source "${config_file}"

home_config_file="${HOME}/.jjdeploy/jjdeploy.config"
if [ -f "${home_config_file}" ];
then
	source "${home_config_file}"	
fi

source "${config_file}"

### Script Constants

#### Check resources path first (Use local, and if it doesn't exist use global)

FINAL_RESOURCESPATH="${PWD}/${RESOURCESPATH}"
if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then
	FINAL_RESOURCESPATH="${PWD}/.jjdeploy/${RESOURCESPATH}"
	if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then	
		FINAL_RESOURCESPATH="${HOME}/.jjdeploy/${RESOURCESPATH}"
		if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then	
			FINAL_RESOURCESPATH="${SCRIPTPATH}${RESOURCESPATH}"
		fi
	fi
fi

if [ ! -d  "${FINAL_RESOURCESPATH}" ]; then
	echo -e "${redColor} Error: Archive Resources not found at ${FINAL_RESOURCESPATH}. Please check your installation of JJDeploy.\n${endColor}"
	exit 1
fi

export PUBLISH_PLIST_URL="${PUBLISH_URL}/${APPNAME}.plist"
export PUBLISH_IPA_URL="${PUBLISH_URL}/${APPNAME}.ipa"

EXPORTPLIST=$(resourceFilePath "${RESOURCESPATH}" "export.plist")

XCARCHIVEPATH="${ARCHIVEPATH}/${APPNAME}.xcarchive"
IPAARCHIVEPATH="${ARCHIVEPATH}/${APPNAME}.ipa"
PLISTPATH="${FINAL_RESOURCESPATH}/app.plist"
PLISTARCHIVEPATH="${ARCHIVEPATH}/${APPNAME}.plist"
TEMPLATE_HTML_FILENAME="${FINAL_RESOURCESPATH}/index_template.html"

HTMLARCHIVEPATH="$ARCHIVEPATH/$HTML_FILENAME"
CSSPATH="${FINAL_RESOURCESPATH}/css"
CSSARCHIVEPATH="$ARCHIVEPATH/css"
ICONFILENAME="Icon.png"
ICONARCHIVEPATH="$ARCHIVEPATH/$ICONFILENAME"

if [ $only_upload -eq 1 ];
then
	if [ -z "${KEYCHAIN_ITEM}" ]; then
		echo -e "${redColor}\n Error: KEYCHAIN_ITEM is not defined \n${endColor}"
		exit 1
	fi
	
	if [ -z "${FTPACCOUNT}" ]; then
		echo -e "${redColor}\n Error: FTPACCOUNT is not defined \n${endColor}"
		exit 1
	fi

	if [ -z "${FTPSERVER}" ]; then
		echo -e "${redColor}\n Error: FTPSERVER is not defined \n${endColor}"
		exit 1
	fi

	if [ -z "${FTPPORT}" ]; then
		echo -e "${redColor}\n Error: FTPPORT is not defined \n${endColor}"
		exit 1
	fi


	upload "$FTPREMOTEPATH" "$KEYCHAIN_ITEM" "$FTPACCOUNT" "$FTPSERVER" "$FTPPORT" "$HTMLARCHIVEPATH" "$PLISTARCHIVEPATH" "$IPAARCHIVEPATH" "$CSSARCHIVEPATH" "$ICONARCHIVEPATH" "$FTP_USE_SFTP"
	
	# upload "$FTPREMOTEPATH" "$TRANSMIT_FAVNAME" "$HTMLARCHIVEPATH" "$PLISTARCHIVEPATH" "$IPAARCHIVEPATH" "$CSSARCHIVEPATH" "$ICONARCHIVEPATH"
	echo -e "${greenColor}\nDone\n${endColor}"
	
	exit 0
fi


### Commands

#### Check plist file exists
if [ ! -f "$ROOT_DIR/$PLISTFILE" ];
then
	echo -e "${redColor} Error: no plist file found at \"$ROOT_DIR/$PLISTFILE\"\n${endColor}"
	exit 0
fi


#### Request changes

if [ $interactive -eq 1 ]; then
	CHANGES="Fixes"

	if [ -d "$ROOT_DIR/.git" ]
	then
		CHANGES="$(echo -n `git log -1 --pretty=%B`)"
	elif [ -d "$ROOT_DIR/.hg" ]
	then
		CHANGES="$(hg log -l 1 --template "{desc}")"
	fi

	if [ -f "$messageTempFile" ]
	then
		CHANGES=$(<"$messageTempFile")
	fi

	if [ $verbose -eq 1 ]; then
		echo "Asking for changes…"
	fi

	CHANGES=`osascript \
	  -e "on run(argv)" \
	  -e "return the text returned of (display dialog \"What has changed?\" default answer item 1 of argv)" \
	  -e "end" \
	  -- "$CHANGES"`

	if [ -z "$CHANGES" ];
	then
		echo "User Cancelled"
		exit 0
	fi

	echo $CHANGES > "$messageTempFile"
else
	CHANGES=$message
fi

export CHANGES

## Get the build number before archiving, later may be incremented in the last build phase and it won't be the same as the app build
export BUILD_NUMBER=`/usr/libexec/PlistBuddy -c Print:CFBundleVersion "$ROOT_DIR/$PLISTFILE"`

#### Check required resources are copied into the project folder

#### Archive
echo "Archiving…"

if [ ! -d "$ARCHIVEPATH" ]; then
	mkdir -p "$ARCHIVEPATH"
fi

if [ -n "$WORKSPACE" ];
then
	if [ $verbose -eq 1 ]; then
		echo "Building workspace ${WORKSPACE}"
	fi
	
	build="xcodebuild -workspace \"$ROOT_DIR/$WORKSPACE\" -scheme \"$SCHEME\" -destination generic/platform=iOS archive -archivePath \"$XCARCHIVEPATH\" ${XCODEPARAMS}"
else
	
	if [ $verbose -eq 1 ]; then
		echo "Building project ${PROJECTNAME}"
	fi
	
	build="xcodebuild -project \"$ROOT_DIR/$PROJECTNAME\" -scheme \"$SCHEME\" -destination generic/platform=iOS archive -archivePath \"$XCARCHIVEPATH\" ${XCODEPARAMS}"
fi

[ $verbose -ne 1 ] && build=$build" | egrep -A 5 \"(error):\""

eval $build

if [ ! -d $XCARCHIVEPATH ];
then
	echo -e "${redColor} Error archiving project. Please check xcodebuild output and your config, and fix any issues you find.\n${endColor}"
	exit 1
fi

rm "$IPAARCHIVEPATH" > /dev/null 2> /dev/null

#### Export
echo "Exporting ipa file…"

EXPORTPLISTPATH="$PWD/.export.plist"

generateExportPlist "$EXPORTMETHOD" "$EXPORTPLISTPATH" "$BUNDLE_ID" "$PROVPROFILE"

IPATMPPATH="${ARCHIVEPATH}/ipa"

archive="${SCRIPTPATH}bin/xcbuildsafe.sh -exportArchive -exportOptionsPlist \"$EXPORTPLISTPATH\" -archivePath \"$XCARCHIVEPATH\" -exportPath \"$IPATMPPATH\""

[ $verbose -ne 1 ] && archive=$archive" > /dev/null"

eval $archive

GENERATED_IPA=$(find "$IPATMPPATH" -type f -name '*.ipa' -print | head -n 1)
mv "$GENERATED_IPA" "$IPAARCHIVEPATH"
rmdir "$IPATMPPATH"

rm "$EXPORTPLISTPATH"

rm -rf "$XCARCHIVEPATH"

export CURRENT_TIMESTAMP=`date +"%d.%m.%Y %H:%M"`

export CURRENT_YEAR=$(date +"%Y")

export APP_VERSION=`/usr/libexec/PlistBuddy -c Print:CFBundleShortVersionString "$ROOT_DIR/$PLISTFILE"`


## Find info.plist inside the app
unzip -o "$IPAARCHIVEPATH" -d "${ARCHIVEPATH}" > /dev/null 2> /dev/null
ipaInfoPath=$(find "${ARCHIVEPATH}/Payload" -type f -not -path "*/\.*" -maxdepth 2 -name 'Info.plist' -print | head -n 1)
export BUNDLE_ID=`/usr/libexec/PlistBuddy -c Print:CFBundleIdentifier "$ipaInfoPath"`
rm -rf "${ARCHIVEPATH}/Payload"

# export BUNDLE_ID=`/usr/libexec/PlistBuddy -c Print:CFBundleIdentifier "$ROOT_DIR/$PLISTFILE"`
export ICON_URL="${PUBLISH_URL}/$ICONFILENAME"

export DISPLAY_APPNAME

export COMPANYNAME

#### Fill template & generate html file
echo "Filling templates…"

render "${TEMPLATE_HTML_FILENAME}" "${HTMLARCHIVEPATH}"
# perl -p -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg' < "${TEMPLATE_HTML_FILENAME}" > "${HTMLARCHIVEPATH}"

### Fill plist file
perl -p -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg' < "${PLISTPATH}" > "${PLISTARCHIVEPATH}"

if [ -f $HTMLARCHIVEPATH ];
then
	#### Copy css files
	rm -rf "$ARCHIVEPATH/$CSSPATH"
	cp -R "$CSSPATH" "$ARCHIVEPATH"
	
	#### Find Icon & copy to archive
	echo "Finding Icon…"
	
	if [ -z "$APPICON" ];
	then
		iconpath=`find $ROOT_DIR -type d -not -path '*/\.*' -name '*.appiconset' -print | head -n 1`
		if [ -n "$iconpath" ];
		then
			icon=`find ${iconpath} -type f -not -path '*/\.*' -print0 | xargs -0 ls -1S | head -n 1`
			if [ -n "$icon" ];
			then
				if [ $verbose -ne 1 ]; then
				echo "Found icon: $icon"	
				fi
				
				cp "$icon" "$ICONARCHIVEPATH"
			else
				echo -e "${redColor} Error: Icon file not found. Please check that your image asset contains the app icon.\n${endColor}"
			fi
		else
			echo -e "${redColor} Error: Icon file not found. Image assets are required to display the app icon.\n${endColor}"
		fi
	else
		if [ $verbose -ne 1 ]; then
		echo "Using icon: $APPICON"
		fi
		cp "$APPICON" "$ICONARCHIVEPATH"
	fi
	
fi

if [ -f $IPAARCHIVEPATH ] && [ -f $HTMLARCHIVEPATH ];
then
	
	if [  $DISABLE_SOURCE_CONTROL -ne 1 ];
	then	
		#### Commit & push changes
		echo "Commit & push changes…"
	
		if [ -d "$ROOT_DIR/.git" ]
		then
			if [ $verbose -ne 1 ]; then
				git add -A $ROOT_DIR
				git commit -m "$CHANGES" -q
				git push  > /dev/null -q
			else
				git add -A $ROOT_DIR
				git commit -m "$CHANGES"
				git push
			fi
		elif [ -d "$ROOT_DIR/.hg" ]
		then
			if [ $verbose -ne 1 ]; then
				hg addrem $ROOT_DIR  > /dev/null
				hg commit -m "$CHANGES"  > /dev/null
				hg push  > /dev/null
			else
				hg addrem $ROOT_DIR
				hg commit -m "$CHANGES"
				hg push
			fi
		fi
	fi
	
	#### Upload to ftp
	if [ -z "${KEYCHAIN_ITEM}" ]; then
		echo -e "${redColor}\n Error: KEYCHAIN_ITEM is not defined \n${endColor}"
		exit 1
	fi
	
	if [ -z "${FTPACCOUNT}" ]; then
		echo -e "${redColor}\n Error: FTPACCOUNT is not defined \n${endColor}"
		exit 1
	fi

	if [ -z "${FTPSERVER}" ]; then
		echo -e "${redColor}\n Error: FTPSERVER is not defined \n${endColor}"
		exit 1
	fi

	if [ -z "${FTPPORT}" ]; then
		echo -e "${redColor}\n Error: FTPPORT is not defined \n${endColor}"
		exit 1
	fi
	
	upload "$FTPREMOTEPATH" "$KEYCHAIN_ITEM" "$FTPACCOUNT" "$FTPSERVER" "$FTPPORT" "$HTMLARCHIVEPATH" "$PLISTARCHIVEPATH" "$IPAARCHIVEPATH" "$CSSARCHIVEPATH" "$ICONARCHIVEPATH" "$FTP_USE_SFTP"
	# upload "$FTPREMOTEPATH" "$TRANSMIT_FAVNAME" "$HTMLARCHIVEPATH" "$PLISTARCHIVEPATH" "$IPAARCHIVEPATH" "$CSSARCHIVEPATH" "$ICONARCHIVEPATH"
	
	#### Remove temp message file
	if [ -f "$messageTempFile" ];
	then
		rm "$messageTempFile"
	fi
	
	#### Send email
	
	if [ -z "$EMAIL" ]
	then
		EMAIL = "$COMPANYEMAIL"
	fi
	
	if [ -z "${EMAIL_NAME}" ]
	then
		EMAIL_NAME = "$COMPANYNAME"
	fi

	EMAIL_BODY="${CHANGES}\n\nInstall from: ${PUBLISH_URL}"

	if [ $param_send_email -eq 1 ]
	then
		sendEmail "${APPNAME} ${APP_VERSION} (${BUILD_NUMBER}) Published" $EMAIL_BODY $EMAIL_NAME $EMAIL
	elif [ $param_send_email -eq -1 ] && [ "$SEND_EMAIL" = true ];
	then
		sendEmail "${APPNAME} ${APP_VERSION} (${BUILD_NUMBER}) Published" $EMAIL_BODY $EMAIL_NAME $EMAIL
	fi
	
	echo -e "${greenColor}\nDone\n${endColor}"
	
else
	
	#### Report Error
	
	echo -e "${redColor} Error: no ipa or html file. Run with -v option and check the xcodebuild output. \n${endColor}"
	
	osascript  -e "display alert \"Error archiving ${APPNAME}. No ipa or html file\""
	open $ARCHIVEPATH
fi

WORKSPACE=$OLD_WORKSPACE

tput bel
exit 0

